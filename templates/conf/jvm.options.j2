{{ ansible_managed | comment }}
###########################################################################
#                             jvm.options                                 #
#                                                                         #
# - all flags defined here will be used by cassandra to startup the JVM   #
# - one flag should be specified per line                                 #
# - lines that do not start with '-' will be ignored                      #
# - only static flags are accepted (no variables or parameters)           #
# - dynamic flags will be appended to these on cassandra-env              #
###########################################################################

######################
# STARTUP PARAMETERS #
######################

# Uncomment any of the following properties to enable specific startup parameters

# In a multi-instance deployment, multiple Cassandra instances will independently assume that all
# CPU processors are available to it. This setting allows you to specify a smaller set of processors
# and perhaps have affinity.
#-Dcassandra.available_processors=number_of_processors
{% if ( cassandra_available_processors is defined ) -%}
-Dcassandra.available_processors={{ cassandra_available_processors }}
{% endif %}
# The directory location of the cassandra.yaml file.
#-Dcassandra.config=directory N. from Idealista: this is a typo, you must introduce complete path
{% if ( cassandra_config_directory is defined ) -%}
-Dcassandra.config=file://{{ cassandra_config_directory }}/cassandra.yaml
{% endif %}
# Sets the initial partitioner token for a node the first time the node is started.
#-Dcassandra.initial_token=token
{% if ( cassandra_initial_token is defined ) -%}
-Dcassandra.initial_token={{ cassandra_initial_token }}
{% endif %}

# Set to false to start Cassandra on a node but not have the node join the cluster.
#-Dcassandra.join_ring=true|false
{% if ( cassandra_join_ring is defined ) -%}
-Dcassandra.join_ring={{ cassandra_join_ring }}
{% endif %}

# Set to false to clear all gossip state for the node on restart. Use when you have changed node
# information in cassandra.yaml (such as listen_address).
#-Dcassandra.load_ring_state=true|false
{% if ( cassandra_load_ring_state is defined ) -%}
-Dcassandra.load_ring_state={{ cassandra_load_ring_state }}
{% endif %}

# Enable pluggable metrics reporter. See Pluggable metrics reporting in Cassandra 2.0.2.
#-Dcassandra.metricsReporterConfigFile=file
{% if ( cassandra_metricsReporterConfigFile is defined ) -%}
-Dcassandra.metricsReporterConfigFile={{ cassandra_metricsReporterConfigFile }}
{% endif %}

# Set the port on which the CQL native transport listens for clients. (Default: 9042)
#-Dcassandra.native_transport_port=port
{% if ( cassandra_native_transport_port is defined ) -%}
-Dcassandra.native_transport_port={{ cassandra_native_transport_port }}
{% endif %}

# Overrides the partitioner. (Default: org.apache.cassandra.dht.Murmur3Partitioner)
#-Dcassandra.partitioner=partitioner
{% if ( cassandra_partitioner is defined ) -%}
-Dcassandra.partitioner={{ cassandra_partitioner }}
{% endif %}

# To replace a node that has died, restart a new node in its place specifying the address of the
# dead node. The new node must not have any data in its data directory, that is, it must be in the
# same state as before bootstrapping.
#-Dcassandra.replace_address=listen_address or broadcast_address of dead node
{% if ( cassandra_replace_address is defined ) -%}
-Dcassandra.replace_address={{ cassandra_replace_address }}
{% endif %}

# Allow restoring specific tables from an archived commit log.
#-Dcassandra.replayList=table
{% if ( cassandra_replyList is defined ) -%}
-Dcassandra.cassandra_replyList={{ cassandra_replyList }}
{% endif %}

# Allows overriding of the default RING_DELAY (30000ms), which is the amount of time a node waits
# before joining the ring.
#-Dcassandra.ring_delay_ms=ms
{% if ( cassandra_ring_delay_ms is defined ) -%}
-Dcassandra.cassandra_ring_delay_ms={{ cassandra_ring_delay_ms }}
{% endif %}

# Set the port for the Thrift RPC service, which is used for client connections. (Default: 9160)
#-Dcassandra.rpc_port=port
{% if ( cassandra_rpc_port is defined ) -%}
-Dcassandra.rpc_port={{ cassandra_rpc_port }}
{% endif %}

# Set the SSL port for encrypted communication. (Default: 7001)
#-Dcassandra.ssl_storage_port=port
{% if ( cassandra_ssl_storage_port is defined ) -%}
-Dcassandra.ssl_storage_port={{ cassandra_ssl_storage_port }}
{% endif %}

# Enable or disable the native transport server. See start_native_transport in cassandra.yaml.
# cassandra.start_native_transport=true|false
{% if ( cassandra_start_native_transport is defined ) -%}
-Dcassandra.start_native_transport={{ cassandra_start_native_transport }}
{% endif %}

# Enable or disable the Thrift RPC server. (Default: true)
#-Dcassandra.start_rpc=true/false
{% if ( cassandra_start_rpc is defined ) -%}
-Dcassandra.start_rpc={{ cassandra_start_rpc }}
{% endif %}

# Set the port for inter-node communication. (Default: 7000)
#-Dcassandra.storage_port=port
{% if ( cassandra_storage_port is defined ) -%}
-Dcassandra.storage_port={{ cassandra_storage_port }}
{% endif %}

# Set the default location for the trigger JARs. (Default: conf/triggers)
#-Dcassandra.triggers_dir=directory
{% if ( cassandra_triggers_dir is defined ) -%}
-Dcassandra.triggers_dir={{ cassandra_triggers_dir }}
{% endif %}

# For testing new compaction and compression strategies. It allows you to experiment with different
# strategies and benchmark write performance differences without affecting the production workload. 
#-Dcassandra.write_survey=true
{% if ( cassandra_write_survey is defined ) -%}
-Dcassandra.write_survey={{ cassandra_write_survey }}
{% endif %}

# To disable configuration via JMX of auth caches (such as those for credentials, permissions and
# roles). This will mean those config options can only be set (persistently) in cassandra.yaml
# and will require a restart for new values to take effect.
#-Dcassandra.disable_auth_caches_remote_configuration=true
{% if ( cassandra_disable_auth_caches_remote_configuration is defined ) -%}
-Dcassandra.disable_auth_caches_remote_configuration={{ disable_auth_caches_remote_configuration }}
{% endif %}

########################
# GENERAL JVM SETTINGS #
########################

# enable assertions. highly suggested for correct application functionality.
{% if ( cassandra_enable_assertions is defined ) and ( cassandra_enable_assertions == true ) -%}
-ea
{% endif %}

# enable thread priorities, primarily so we can give periodic tasks
# a lower priority to avoid interfering with client workload
{% if ( cassandra_enable_thread_priorities is defined ) and ( cassandra_enable_thread_priorities == true ) -%}
-XX:+UseThreadPriorities
{% endif %}

# allows lowering thread priority without being root on linux - probably
# not necessary on Windows but doesn't harm anything.
# see http://tech.stolsvik.com/2010/01/linux-java-thread-priorities-workar
{% if ( cassandra_lowering_thread_priority is defined ) -%}
-XX:ThreadPriorityPolicy={{ cassandra_lowering_thread_priority }}
{% endif %}

# Enable heap-dump if there's an OOM
{% if ( cassandra_enable_heap_dump_oom is defined ) and ( cassandra_enable_heap_dump_oom == true ) -%}
-XX:+HeapDumpOnOutOfMemoryError
{% endif %}

# Per-thread stack size.
{% if ( cassandra_per_thread_stack_size is defined ) -%}
-Xss{{ cassandra_per_thread_stack_size }}
{% endif %}

# Larger interned string table, for gossip's benefit (CASSANDRA-6410)
{% if ( cassandra_larger_interned_string_table is defined ) -%}
-XX:StringTableSize={{ cassandra_larger_interned_string_table }}
{% endif %}

# Make sure all memory is faulted and zeroed on startup.
# This helps prevent soft faults in containers and makes
# transparent hugepage allocation more effective.
{% if ( cassandra_always_pre_touch is defined ) and ( cassandra_always_pre_touch == true ) -%}
-XX:+AlwaysPreTouch
{% endif %}

# Disable biased locking as it does not benefit Cassandra.
{% if ( cassandra_disable_biased_locking is defined ) and ( cassandra_disable_biased_locking == true ) -%}
-XX:-UseBiasedLocking
{% endif %}

# Enable thread-local allocation blocks and allow the JVM to automatically
# resize them at runtime.
{% if ( cassandra_use_resize_TLAB is defined ) and ( cassandra_use_resize_TLAB == true ) -%}
-XX:+UseTLAB
-XX:+ResizeTLAB
{% endif %}

# http://www.evanjones.ca/jvm-mmap-pause.html
{% if ( cassandra_perf_disable_shared_mem is defined ) and ( cassandra_perf_disable_shared_mem == true ) -%}
-XX:+PerfDisableSharedMem
{% endif %}

# Prefer binding to IPv4 network intefaces (when net.ipv6.bindv6only=1). See
# http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6342561 (short version:
# comment out this entry to enable IPv6 support).
{% if ( cassandra_prefer_binding_ipv4 is defined ) -%}
-Djava.net.preferIPv4Stack={{ cassandra_prefer_binding_ipv4 }}
{% endif %}

### Debug options

# uncomment to enable flight recorder
#-XX:+UnlockCommercialFeatures
#-XX:+FlightRecorder
{% if ( cassandra_enable_flight_recorder is defined ) and ( cassandra_enable_flight_recorder == true ) -%}
-XX:+UnlockCommercialFeatures
-XX:+FlightRecorder
{% endif %}

# uncomment to have Cassandra JVM listen for remote debuggers/profilers on port 1414
#-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1414
{% if ( cassandra_remote_debuggers is defined ) and ( cassandra_remote_debuggers == true ) -%}
-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1414
{% endif %}

# uncomment to have Cassandra JVM log internal method compilation (developers only)
#-XX:+UnlockDiagnosticVMOptions
#-XX:+LogCompilation
{% if ( cassandra_log_internal_method_compilation is defined ) and ( cassandra_log_internal_method_compilation == true ) -%}
-XX:+UnlockDiagnosticVMOptions
-XX:+LogCompilation
{% endif %}

#################
# HEAP SETTINGS #
#################

# Heap size is automatically calculated by cassandra-env based on this
# formula: max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
# That is:
# - calculate 1/2 ram and cap to 1024MB
# - calculate 1/4 ram and cap to 8192MB
# - pick the max
#
# For production use you may wish to adjust this for your environment.
# If that's the case, uncomment the -Xmx and Xms options below to override the
# automatic calculation of JVM heap memory.
#
# It is recommended to set min (-Xms) and max (-Xmx) heap sizes to
# the same value to avoid stop-the-world GC pauses during resize, and
# so that we can lock the heap in memory on startup to prevent any
# of it from being swapped out.
#-Xms4G
#-Xmx4G
{% if ( cassandra_heap_min_size is defined ) -%}
-Xms{{ cassandra_heap_min_size }}
{% endif %}
{% if ( cassandra_heap_max_size is defined ) -%}
-Xmx{{ cassandra_heap_max_size }}
{% endif %}

# Young generation size is automatically calculated by cassandra-env
# based on this formula: min(100 * num_cores, 1/4 * heap size)
#
# The main trade-off for the young generation is that the larger it
# is, the longer GC pause times will be. The shorter it is, the more
# expensive GC will be (usually).
#
# It is not recommended to set the young generation size if using the
# G1 GC, since that will override the target pause-time goal.
# More info: http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html
#
# The example below assumes a modern 8-core+ machine for decent
# times. If in doubt, and if you do not particularly want to tweak, go
# 100 MB per physical CPU core.
#-Xmn800M
{% if ( cassandra_young_generation_size is defined ) -%}
-Xmn{{ cassandra_young_generation_size }}
{% endif %}

###################################
# EXPIRATION DATE OVERFLOW POLICY #
###################################

# Defines how to handle INSERT requests with TTL exceeding the maximum supported expiration date:
# * REJECT: this is the default policy and will reject any requests with expiration date timestamp after 2038-01-19T03:14:06+00:00.
# * CAP: any insert with TTL expiring after 2038-01-19T03:14:06+00:00 will expire on 2038-01-19T03:14:06+00:00 and the client will receive a warning.
# * CAP_NOWARN: same as previous, except that the client warning will not be emitted.
#
#-Dcassandra.expiration_date_overflow_policy=REJECT

#################
#  GC SETTINGS  #
#################

### CMS Settings

-XX:+UseParNewGC
{% if ( cassandra_use_par_new_gc is defined ) and ( cassandra_use_par_new_gc == true ) -%}
-XX:+UseParNewGC
{% endif %}
{% if ( cassandra_use_conc_mark_sweep_gc is defined ) and ( cassandra_use_conc_mark_sweep_gc == true ) -%}
-XX:+UseConcMarkSweepGC
{% endif %}
{% if ( cassandra_cms_parallel_remark_enabled is defined ) and ( cassandra_cms_parallel_remark_enabled == true ) -%}
-XX:+CMSParallelRemarkEnabled
{% endif %}
{% if ( cassandra_survivor_ratio is defined ) -%}
-XX:SurvivorRatio={{ cassandra_survivor_ratio }}
{% endif %}
{% if ( cassandra_max_tenuring_threshold is defined ) -%}
-XX:MaxTenuringThreshold={{ cassandra_max_tenuring_threshold }}
{% endif %}
{% if ( cassandra_cms_initiating_occupancy_fraction is defined ) -%}
-XX:CMSInitiatingOccupancyFraction={{ cassandra_cms_initiating_occupancy_fraction }}
{% endif %}
{% if ( cassandra_cms_initiating_occupancy_only is defined ) and ( cassandra_cms_initiating_occupancy_only == true ) -%}
-XX:+UseCMSInitiatingOccupancyOnly
{% endif %}
{% if ( cassandra_cms_wait_duration is defined ) -%}
-XX:CMSWaitDuration={{ cassandra_cms_wait_duration }}
{% endif %}
-XX:+CMSParallelInitialMarkEnabled
{% if ( cassandra_cms_eden_chunks_record_always is defined ) and ( cassandra_cms_eden_chunks_record_always == true ) -%}
-XX:+CMSEdenChunksRecordAlways
{% endif %}
# some JVMs will fill up their heap when accessed via JMX, see CASSANDRA-6541
{% if ( cassandra_cms_class_unloading_enabled is defined ) and ( cassandra_cms_class_unloading_enabled == true ) -%}
-XX:+CMSClassUnloadingEnabled
{% endif %}

### G1 Settings (experimental, comment previous section and uncomment section below to enable)

## Use the Hotspot garbage-first collector.
#-XX:+UseG1GC
{% if ( cassandra_use_g1_gc is defined ) and ( cassandra_use_g1_gc == true ) -%}
-XX:+UseG1GC
{% endif %}
#
## Have the JVM do less remembered set work during STW, instead
## preferring concurrent GC. Reduces p99.9 latency.
#-XX:G1RSetUpdatingPauseTimePercent=5
{% if ( cassandra_g1r_set_updating_pause_time_percent is defined ) -%}
-XX:G1RSetUpdatingPauseTimePercent={{ cassandra_g1r_set_updating_pause_time_percent }}
{% endif %}
#
## Main G1GC tunable: lowering the pause target will lower throughput and vise versa.
## 200ms is the JVM default and lowest viable setting
## 1000ms increases throughput. Keep it smaller than the timeouts in cassandra.yaml.
#-XX:MaxGCPauseMillis=500
{% if ( cassandra_max_gc_pause_millis is defined ) -%}
-XX:MaxGCPauseMillis={{ cassandra_max_gc_pause_millis }}
{% endif %}
## Optional G1 Settings

# Save CPU time on large (>= 16GB) heaps by delaying region scanning
# until the heap is 70% full. The default in Hotspot 8u40 is 40%.
{% if ( cassandra_initiating_heap_occupancy_percent is defined ) -%}
-XX:InitiatingHeapOccupancyPercent={{ cassandra_initiating_heap_occupancy_percent }}
{% endif %}

# For systems with > 8 cores, the default ParallelGCThreads is 5/8 the number of logical cores.
# Otherwise equal to the number of cores when 8 or less.
# Machines with > 10 cores should try setting these to <= full cores.
#-XX:ParallelGCThreads=16
{% if ( cassandra_parallel_gc_threads is defined ) -%}
-XX:ParallelGCThreads={{ cassandra_parallel_gc_threads }}
{% endif %}
# By default, ConcGCThreads is 1/4 of ParallelGCThreads.
# Setting both to the same value can reduce STW durations.
#-XX:ConcGCThreads=16
{% if ( cassandra_con_gc_threads is defined ) -%}
-XX:ConcGCThreads={{ cassandra_con_gc_threads }}
{% endif %}

### GC logging options -- uncomment to enable

{% if ( cassandra_print_gc_details is defined ) and ( cassandra_print_gc_details == true ) -%}
-XX:+PrintGCDetails
{% endif %}
{% if ( cassandra_print_gc_date_stamps is defined ) and ( cassandra_print_gc_date_stamps == true ) -%}
-XX:+PrintGCDateStamps
{% endif %}
{% if ( cassandra_print_heap_at_gc is defined ) and ( cassandra_print_heap_at_gc == true ) -%}
-XX:+PrintHeapAtGC
{% endif %}
{% if ( cassandra_print_tenuring_distribution is defined ) and ( cassandra_print_tenuring_distribution == true ) -%}
-XX:+PrintTenuringDistribution
{% endif %}
{% if ( cassandra_print_gc_application_stopped_time is defined ) and ( cassandra_print_gc_application_stopped_time == true ) -%}
-XX:+PrintGCApplicationStoppedTime
{% endif %}
{% if ( cassandra_print_promotion_failure is defined ) and ( cassandra_print_promotion_failure == true ) -%}
-XX:+PrintPromotionFailure
{% endif %}
#-XX:PrintFLSStatistics=1
{% if ( cassandra_print_flsstatistics is defined ) -%}
-XX:PrintFLSStatistics={{ cassandra_print_flsstatistics }}
{% endif %}
#-Xloggc:/var/log/cassandra/gc.log
{% if ( cassandra_log_gc is defined ) -%}
-Xloggc:{{ cassandra_log_gc }}
{% endif %}
{% if ( cassandra_use_gc_log_file_rotation is defined ) and ( cassandra_use_gc_log_file_rotation == true ) -%}
-XX:+UseGCLogFileRotation
{% endif %}
{% if ( cassandra_nr_log_files is defined ) -%}
-XX:NumberOfGCLogFiles={{ cassandra_nr_log_files }}
{% endif %}
{% if ( cassandra_cg_log_file_size is defined ) -%}
-XX:GCLogFileSize={{ cassandra_cg_log_file_size }}
{% endif %}
